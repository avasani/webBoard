{
  "name": "pdfutils",
  "version": "0.3.2",
  "author": {
    "name": "Enno Boland",
    "email": "eb@s01.de"
  },
  "description": "tool for analyzing and converting PDF documents.",
  "main": "./index",
  "repository": {
    "type": "git",
    "url": "https://github.com/Gottox/node-pdfutils.git"
  },
  "keywords": [
    "pdf",
    "document",
    "util"
  ],
  "dependencies": {},
  "devDependencies": {},
  "scripts": {
    "test": "make test",
    "install": "node-gyp rebuild"
  },
  "license": "GPL",
  "engine": {
    "node": ">=0.6"
  },
  "gypfile": true,
  "readme": "[![Flattr this git repo](http://api.flattr.com/button/flattr-badge-large.png)](https://flattr.com/submit/auto?user_id=Gottox&url=https://github.com/Gottox/node-pdfutils&title=node-pdfutils&language=&tags=github&category=software)\n\nPDF Utils for node\n==================\n\nThis library contains tools for analysing and converting PDF files. You can\nget metadata, extract text, render pages to svg or png, all with our beloved\nasynchronous programming style.\n\nIt is planed to support extracting links from the document and create ImageMaps\n([You remember them, don't you?](http://en.wikipedia.org/wiki/Image_map)) on\nthe fly. Also pdfutils should support password locked files.\nBut that's still on the todo.\n\nThe library is currently beta. This means it has incomplete error handling and\nit lacks a testing suite.\n\nInstallation\n------------\n\nTo install pdfutils you have to install libpoppler-glib first.\n\nUsing Debian execute:\n\n\tapt-get install libpoppler-glib-dev libpoppler-glib8 libcairo2-dev libcairo2\n\nUsing MacOS and Macports:\n\n\tport install poppler\n\t\nor if you prefere brew:\n\n\tbrew install poppler --with-glib\n\texport PKG_CONFIG_PATH=/usr/X11/lib/pkgconfig\n\nThen install pdfutils\n\n\tnpm install pdfutils\n\nUsage\n-----\n\nSee this very basic example:\n\n\tvar pdfutils = require('pdfutils').pdfutils;\n\n\tpdfutils(\"document.pdf\", function(err, doc) {\n\t\tdoc[0].asPNG({maxWidth: 100, maxHeight: 100}).toFile(\"firstpage.png\");\n\t});\n\n3sloc to generate thumbnails of PDFs. Awesome!\n\nHere a bit more documentation:\n\n### pdfutils(source, callback)\n\nthis function is a factory for Documents\n\narguments:\n\n * __source__: can be a Buffer or a String. If it's a string, read from the\n  file. If it's a buffer, treat the buffer content as in-memory PDF.\n  Please make sure to not change the buffer while using it by pdfutils!\n * __callback(err, doc)__: a callback with the following arguments:\n   * _err_: an error string when the pdf couldn't be loaded successfully,\n     otherwise `null`\n   * _doc_: an instance of `Document` when the pdf is loaded successfully,\n     otherwise `undefined`\n\n### Class PDFDocument\n\nThis class is generated by pdfutils(source, callback) described above.\n\nmembers:\n\n * __0, 1, 2, 3, 4, ... , n__ instances of the `Page`s contained by the\n  Document. See description of `Page` below\n * __length__: number of `Page`s in a document\n * __author__: the author of the document or `null` if not known\n * __creationDate__: the creation date as integer since 1970-01-01\n * __creator__: creator of the document or null if unknown\n * __format__: exact format of this PDF file or null if unknown\n * __keywords__: keywords of the document as string or null if unknown\n * __linearized__: true if document is [linearized](http://www.citationsoftware.com/faqPDFlinearization.htm),\n   otherwise false\n * __metadata__: Metadata as string\n * __modDate__: last modification of pdf as integer since 1970-01-01\n * __pageLayout__: the layout of the pages. Can be on of the following strings or null if unknown:\n   * _singlePage_\n   * _oneColumn_\n   * _twoColumnLeft_\n   * _twoColumnRight_\n   * _twoPageLeft_\n   * _twoPageRight_\n * __pageMode__: the suggested viewing mode of a page. Can be one of the following strings or null if unkown:\n   * _none_\n   * _useOutlines_\n   * _useThumbs_\n   * _fullscreen_\n   * _useOc_\n   * _useAttachments_\n * __permissions__: the permissions of this document. Is an object with the following members:\n   * _print_: whether the user is allowed to print\n   * _modify_: whether the user is allowed to modify the document\n   * _copy_: whether the user is allowed to take copies of this document\n   * _notes_: whether the user is allowed to make notes\n   * _fillForm_: whether the user is allowed to fill out forms\n * __producer__: producer of a document or null if unknown\n * __subject__: subject of this document or null if unknown\n * __title__: title of the document or null if unknown\n\n### Class PDFPage\n\nThis class represents a page of a document\n\nmembers:\n\n * __width__: width of the document\n * __height__: width of the document\n * __index__: number of this page.\n * __label__: label of this page or null if no label was defined.\n * __links__: array containing links of a page\n * __asSVG(opts)__: returns an instance of PageJob described below, opts is an\n   optional argument with an Object with the following optional fields:\n   * _maxWidth_: maximal width of the resulting SVG in px.\n   * _minWidth_: minimal width of the resulting SVG in px.\n   * _maxHeight_: maximal height of the resulting SVG in px.\n   * _minHeight_: minimal height of the resulting SVG in px.\n   * _width_: the width of the resulting SVG in px. Overwrites minWidth and\n     maxWidth.\n   * _height_: the height of the resulting SVG in px. Overwrites minHeight and\n     maxHeight.\n * __asPDF(opts)__: returns an instance of PageJob described below, opts is an\n   optional argument with an Object with the following optional fields:\n   * _maxWidth_: maximal width of the resulting PDF in pt.\n   * _minWidth_: minimal width of the resulting PDF in pt.\n   * _maxHeight_: maximal height of the resulting PDF in pt.\n   * _minHeight_: minimal height of the resulting PDF in pt.\n   * _width_: the width of the resulting PDF in pt. Overwrites minWidth and\n     maxWidth.\n   * _height_: the height of the resulting PDF in pt. Overwrites minHeight and\n     maxHeight.\n * __asPNG(opts)__: returns an instance of PageJob described below, opts is an\n   optional argument with an Object with the following optional fields:\n   * _maxWidth_: maximal width of the resulting PNG in px\n   * _minWidth_: minimal width of the resulting PNG in px\n   * _maxHeight_: maximal height of the resulting PNG in px\n   * _minHeight_: minimal height of the resulting PNG in px\n   * _width_: the width of the resulting PNG in px. Overwrites minWidth and\n     maxWidth.\n   * _height_: the height of the resulting PNG in px. Overwrites minHeight and\n     maxHeight.\n * __asText(opts)__: returns an instance of PageJob described below. opts is an\n   optional argument with an Object, which is currently ignored.\n\n### Class PDFPageJob\n\nThis class inherits [Stream](http://nodejs.org/api/stream.html). It handles\nconverting a Page (described above) to SVG, PNG or Text\n\nmembers:\n\n * __links__: array containing links of a page, translated to fit the output page.\n\nevents:\n\n * __data__: emitted when a new chunk of the converted file is available\n * __end__: emitted when the file is successfully converted\n * __error__: emitted when the file cannot be converted. Is not implemented yet.\n\nmembers:\n\n * toFile(path, \\[options\\]): writes a page to the file in the desired format.\n * see [Stream](http://nodejs.org/api/stream.html) for further members. \n\nLicense\n-------\n\nThis module is licensed under GPL.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Gottox/node-pdfutils/issues"
  },
  "_id": "pdfutils@0.3.2",
  "_from": "pdfutils@"
}
